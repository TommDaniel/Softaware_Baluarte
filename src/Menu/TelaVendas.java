/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package Menu;

import Logic.Cliente;
import Logic.Clientes;
import Logic.Produto;
import java.awt.BorderLayout;
import java.awt.Desktop;
import java.awt.event.MouseEvent;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.URI;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JSplitPane;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import raven.calendar.model.ModelDate;
import raven.calendar.utils.CalendarSelectedListener;

/**
 *
 * @author danie
 */
public class TelaVendas extends javax.swing.JInternalFrame {

    private static TelaVendas telaVendas;
    private DefaultTableModel modelo1;
    private DefaultTableModel modelo2;
    private DefaultTableModel modelo3;
    private DefaultTableModel modelo4;
    private final Map<String, String> anotacoes = loadAnotacoesFromFile("save/dadosAnotações.ser");
    DecimalFormat formato = new DecimalFormat("#.##");
    public static TelaVendas getInstancia(){
        if(telaVendas == null || telaVendas.isClosed() || !telaVendas.isDisplayable()){
            telaVendas = new TelaVendas();
            telaVendas.setLocation(0,-30);
        } 
        return telaVendas;
        
    }
    
    public void saveAnotacoesToFile() {
        try (FileOutputStream fileOutputStream = new FileOutputStream("save/dadosAnotações.ser");
             ObjectOutputStream objectOutputStream = new ObjectOutputStream(fileOutputStream)) {
            
            // Escreve o objeto Map no arquivo
            objectOutputStream.writeObject(anotacoes);
            
        } catch (IOException e) {
            System.err.println("Erro ao salvar o mapa de anotações: " + e.getMessage());
        }
    }
    public Map<String, String> loadAnotacoesFromFile(String filePath) {
        Map<String, String> novo = null;

        try (FileInputStream fileInputStream = new FileInputStream(filePath); ObjectInputStream objectInputStream = new ObjectInputStream(fileInputStream)) {

            // Lê o objeto Map do arquivo
            Object object = objectInputStream.readObject();
            if (object instanceof Map) {
                novo = (Map<String, String>) object;
            }

        } catch (IOException e) {
            System.err.println("Erro ao carregar o mapa de anotações: " + e.getMessage());
        } catch (ClassNotFoundException e) {
            System.err.println("Classe não encontrada durante a desserialização: " + e.getMessage());
        }
        if (novo != null) {
            
            return novo;
        } else {
            return novo = new HashMap<>();
        }
        
       
    }
    
    /**
     * Creates new form TelaVendas
     */
    public TelaVendas() {
        initComponents();
        
        tableDark1.fixTable(jScrollPane1);
        modelo1 = (DefaultTableModel) tableDark1.getModel();
        tableDark1.setRowSorter(new TableRowSorter(modelo1));
        
        tableDark2.fixTable(jScrollPane2);
        modelo2 = (DefaultTableModel) tableDark2.getModel();
        tableDark2.setRowSorter(new TableRowSorter(modelo2));
        
        
        
        
        tableDark2.getSelectionModel().addListSelectionListener(e -> {
            if (!e.getValueIsAdjusting()) {
                atualizarTabelaItensComprados();
            }
        });
        
        tableDark3.fixTable(jScrollPane3);
        modelo3 = (DefaultTableModel) tableDark3.getModel();
        tableDark3.setRowSorter(new TableRowSorter(modelo3));
        
        tableDark4.fixTable(jScrollPane4);
        modelo4 = (DefaultTableModel) tableDark4.getModel();
        tableDark4.setRowSorter(new TableRowSorter(modelo4));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane(tableDark1);
        tableDark1 = new tabledark.TableDark();
        jScrollPane2 = new javax.swing.JScrollPane(tableDark2);
        tableDark2 = new tabledark.TableDark();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableDark3 = new tabledark.TableDark();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jMenuItem3 = new javax.swing.JMenuItem();
        textField1 = new Menu.TextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableDark4 = new tabledark.TableDark();
        calendar1 = new raven.calendar.Calendar();
        jPanel2 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        botaoClientes = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        Tela = new javax.swing.JPanel();

        tableDark1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null}
            },
            new String [] {
                "Cliente", "Numero", "Endereço"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDark1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableDark1MousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(tableDark1);

        tableDark2.setForeground(new java.awt.Color(204, 204, 204));
        tableDark2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Cliente", "Valor Devido"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDark2.setColumnSelectionAllowed(true);
        tableDark2.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tableDark2.getTableHeader().setReorderingAllowed(false);
        tableDark2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tableDark2MousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(tableDark2);
        tableDark2.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jMenuItem1.setText("Adicionar");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setText("Excluir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        tableDark3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Catergoria", "Descrição", "Quantidade", "Preço"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDark3.setEditingColumn(0);
        tableDark3.setEditingRow(0);
        tableDark3.getTableHeader().setResizingAllowed(false);
        tableDark3.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(tableDark3);

        jMenuItem3.setText("Pagar");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jPopupMenu2.add(jMenuItem3);

        textField1.setBackground(new java.awt.Color(51, 51, 51));
        textField1.setForeground(new java.awt.Color(255, 255, 255));
        textField1.setLabelText("Valor");

        tableDark4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Catergoria", "Descrição", "Quantidade", "Preço"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableDark4.setEditingColumn(0);
        tableDark4.setEditingRow(0);
        tableDark4.getTableHeader().setResizingAllowed(false);
        tableDark4.getTableHeader().setReorderingAllowed(false);
        jScrollPane4.setViewportView(tableDark4);

        setBackground(new java.awt.Color(51, 51, 51));
        setBorder(null);
        setPreferredSize(new java.awt.Dimension(714, 548));

        jPanel2.setBackground(java.awt.Color.lightGray);

        jButton1.setBackground(java.awt.Color.lightGray);
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Menu/right-arrow.png"))); // NOI18N
        jButton1.setToolTipText("");
        jButton1.setBorder(null);
        jButton1.setFocusPainted(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setBackground(new java.awt.Color(0, 0, 0));
        jLabel1.setFont(new java.awt.Font("Impact", 0, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Vendas");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 504, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(51, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel1.setBackground(new java.awt.Color(51, 51, 51));
        jPanel1.setLayout(new java.awt.GridLayout(5, 0));

        botaoClientes.setBackground(new java.awt.Color(102, 102, 102));
        botaoClientes.setText("Tabela de Clientes");
        botaoClientes.setFocusPainted(false);
        botaoClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoClientesActionPerformed(evt);
            }
        });
        jPanel1.add(botaoClientes);

        jButton3.setBackground(new java.awt.Color(102, 102, 102));
        jButton3.setText("Vendas por Cliente");
        jButton3.setFocusPainted(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton3);

        jButton4.setBackground(new java.awt.Color(102, 102, 102));
        jButton4.setText("Todas as vendas");
        jButton4.setFocusPainted(false);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4);

        jButton5.setBackground(new java.awt.Color(102, 102, 102));
        jButton5.setText("Calendário");
        jButton5.setFocusPainted(false);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5);

        jButton6.setBackground(new java.awt.Color(102, 102, 102));
        jButton6.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jButton6.setForeground(new java.awt.Color(239, 93, 202));
        jButton6.setText("@Baluarte");
        jButton6.setFocusPainted(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6);

        Tela.setBackground(new java.awt.Color(51, 51, 51));
        Tela.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(Tela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                    .addComponent(Tela, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        telaVendas.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tableDark1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDark1MousePressed
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {
            int row = tableDark1.rowAtPoint(evt.getPoint());
            tableDark1.setRowSelectionInterval(row, row);
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tableDark1MousePressed

    private void tableDark2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableDark2MousePressed
        // TODO add your handling code here:
        if (SwingUtilities.isRightMouseButton(evt)) {
            int row = tableDark2.rowAtPoint(evt.getPoint());
            tableDark2.setRowSelectionInterval(row, row);
            jPopupMenu2.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_tableDark2MousePressed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        int row = tableDark1.getSelectedRow();
        if (row >= 0) {
            String nome = (String) modelo1.getValueAt(row, 0);
            Clientes.removeCliente(Clientes.getCliente(nome));
            modelo1.removeRow(row);
            Clientes.salvarClientes();
        }
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void botaoClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoClientesActionPerformed
        // TODO add your handling code here:
        Tela.removeAll(); // Remove todos os componentes anteriores
        Tela.add(jScrollPane1, BorderLayout.CENTER); // Adiciona o JScrollPane
        Tela.revalidate(); // Revalida o painel para refletir as mudanças
        Tela.repaint(); // Repinta o painel
        
        while (modelo1.getRowCount() > 0) {
            modelo1.removeRow(0);
        }
        
        for (Cliente cliente : Clientes.getClientes()) {
            Object[] obj = {cliente.getNome(), cliente.getNumero(), cliente.getEndereco()};
            modelo1.addRow(obj);
        }
        
        
    }//GEN-LAST:event_botaoClientesActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        // TODO add your handling code here:
        TelaPrincipal.getInstance().abrirTela2(TelaAddCliente.getInstancia());
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        Tela.removeAll(); // Remove todos os componentes anteriores
        
        JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, jScrollPane2, jScrollPane3);
        splitPane.setDividerLocation(0.5); // Isso define a posição inicial do divisor, 0.5 indica a metade do painel
        splitPane.setResizeWeight(0.5);
    
        Tela.add(splitPane, BorderLayout.CENTER);
     
        Tela.revalidate(); // Revalida o painel para refletir as mudanças
        Tela.repaint(); // Repinta o painel
        
        while (modelo2.getRowCount() > 0) {
            modelo2.removeRow(0);
        }
        while (modelo3.getRowCount() > 0) {
            modelo3.removeRow(0);
        }
        Set<String> clientesQuePagaram = new HashSet<>();
        for (Cliente c : Clientes.getClientes()) {
            if (c.pagou()) {
                clientesQuePagaram.add(c.getNome());
            }
        }
        
        for (int i = 0; i < tableDark2.getColumnCount(); i++) {
            tableDark2.getColumnModel().getColumn(i).setCellRenderer(new CustomCellRenderer(clientesQuePagaram));
        }
        
        formato.setRoundingMode(java.math.RoundingMode.HALF_UP);
        for (Cliente cliente : Clientes.getClientes()) {
            Object[] obj = {cliente.getNome(), formato.format(cliente.totalPedido())};
            modelo2.addRow(obj);
        }
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        int row = tableDark2.getSelectedRow();
        if (row >= 0) {
            int valor = JOptionPane.showConfirmDialog(null, textField1, "Valor pago", JOptionPane.OK_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE);
            if(valor == JOptionPane.OK_OPTION){
                String textoPreco = textField1.getText().trim();
                double valorPago = Double.parseDouble(textoPreco.replace(',', '.'));
                String nome = (String) modelo2.getValueAt(row, 0);
                
                Clientes.getCliente(nome.trim()).Pagar(valorPago);
            }
            
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        Tela.removeAll();
        Tela.add(jScrollPane4, BorderLayout.CENTER); // Adiciona o JScrollPane
        Tela.revalidate(); // Revalida o painel para refletir as mudanças
        Tela.repaint(); // Repinta o painel

        // Limpa a tabela antes de adicionar itens
        while (modelo4.getRowCount() > 0) {
            modelo4.removeRow(0);
        }

        HashMap<String, Object[]> produtosMap = new HashMap<>();
        double PrecoTotal = 0;

        for (Cliente cliente : Clientes.getClientes()) {
            ArrayList<Produto> produtosComprados = cliente.getItensCompra();
            for (Produto produto : produtosComprados) {
                String chaveProduto = produto.getCategoria() + produto.getDescricao(); // Cria uma chave única para o produto

                // Verifica se o produto já foi adicionado
                if (produtosMap.containsKey(chaveProduto)) {
                    Object[] rowData = produtosMap.get(chaveProduto);
                    // Atualiza a quantidade
                    int quantidadeAtual = (Integer) rowData[2];
                    rowData[2] = quantidadeAtual + cliente.getQuantidade(produto);
                } else {
                    // Adiciona o produto ao mapa se não estiver presente
                    Object[] rowData = {
                        produto.getCategoria(),
                        produto.getDescricao(),
                        cliente.getQuantidade(produto),
                        produto.getPreco(),};
                    produtosMap.put(chaveProduto, rowData);
                    
                }
                PrecoTotal += (produto.getPreco() * cliente.getQuantidade(produto));
                
            }
        }

        // Adiciona os produtos do mapa à tabela
        for (Object[] rowData : produtosMap.values()) {
            modelo4.addRow(rowData);
        }
        modelo4.addRow(new Object[]{"Total", "", "", PrecoTotal});
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        try {
            Desktop desktop = Desktop.isDesktopSupported() ? Desktop.getDesktop() : null;
            if (desktop != null && desktop.isSupported(Desktop.Action.BROWSE)) {
                desktop.browse(new URI("https://www.instagram.com/baluartepersonalizaveis/"));
            }
        } catch (Exception e) {
            e.printStackTrace();
            
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        Tela.removeAll();

        Tela.add(calendar1, BorderLayout.CENTER); // Adiciona o painel do calendário ao Tela
        Tela.revalidate();
        Tela.repaint();
        calendar1.addCalendarSelectedListener(new CalendarSelectedListener() {
            @Override
            public void selected(MouseEvent evt, ModelDate date) {
                String key = toSimpleDateString(date);
                
                if (anotacoes.containsKey(key)) {
                    JOptionPane.showMessageDialog(Tela,anotacoes.get(key), "Anotação para " + date,JOptionPane.INFORMATION_MESSAGE);
                    
                }else{
                    // Solicita ao usuário para inserir uma anotação para a data selecionada
                    String anotacao = JOptionPane.showInputDialog(Tela, "Insira uma anotação para " + date);
                    if (anotacao != null && !anotacao.trim().isEmpty()) {
                        anotacoes.put(key, anotacao);
                        saveAnotacoesToFile();
                    }
                    
                }
            }
        });
    }//GEN-LAST:event_jButton5ActionPerformed
    
    private String toSimpleDateString(ModelDate date) {
        return String.format("%d-%d-%d", date.getYear(), date.getMonth(), date.getDay());
    }

    private void atualizarTabelaItensComprados() {
        // Limpa a tabela de itens comprados
        while (modelo3.getRowCount() > 0) {
            modelo3.removeRow(0);
        }

        int selectedRow = tableDark2.getSelectedRow();
        if (selectedRow >= 0) {
            String clienteNome = (String) tableDark2.getValueAt(selectedRow, 0);

            // Encontra o cliente pelo nome
            Cliente clienteSelecionado = Clientes.getCliente(clienteNome);
            HashMap<String, Object[]> produtosMap = new HashMap<>();
            if (clienteSelecionado != null) {
                // Supondo que você tenha um método no cliente para obter a lista de IDs de produtos comprados
                ArrayList<Produto> produtosComprados = clienteSelecionado.getItensCompra();
                double PrecoTotal = 0;
                // Preenche o modelo3 com os itens comprados
                for (Produto produto : produtosComprados) {
                    
                    String chaveProduto = produto.getCategoria() + produto.getDescricao(); // Cria uma chave única para o produto

                    // Verifica se o produto já foi adicionado
                    if (produtosMap.containsKey(chaveProduto)) {
                        Object[] rowData = produtosMap.get(chaveProduto);
                        // Atualiza a quantidade
                        int quantidadeAtual = (Integer) rowData[2];
                        rowData[2] = quantidadeAtual + clienteSelecionado.getQuantidade(produto);
                    } else {
                        // Adiciona o produto ao mapa se não estiver presente
                        Object[] rowData = {
                            produto.getCategoria(),
                            produto.getDescricao(),
                            clienteSelecionado.getQuantidade(produto),
                            produto.getPreco(),};
                        produtosMap.put(chaveProduto, rowData);
                        
                    }
                    PrecoTotal += produto.getPreco() * clienteSelecionado.getQuantidade(produto);
                    
                }
                for (Object[] rowData : produtosMap.values()) {
                    modelo3.addRow(rowData);
                }
                modelo3.addRow(new Object[]{"Total", "", "", PrecoTotal});
            }
        }
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel Tela;
    private javax.swing.JButton botaoClientes;
    private raven.calendar.Calendar calendar1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private tabledark.TableDark tableDark1;
    private tabledark.TableDark tableDark2;
    private tabledark.TableDark tableDark3;
    private tabledark.TableDark tableDark4;
    private Menu.TextField textField1;
    // End of variables declaration//GEN-END:variables

    public Cliente getClientAt(int row) {
        String clienteNome = (String) tableDark2.getValueAt(row, 0);
        Cliente clienteSelecionado = Clientes.getCliente(clienteNome);
        return clienteSelecionado;
    }
}
